diff --git a/example-rules/remotemailfilter.properties b/example-rules/remotemailfilter.properties
deleted file mode 100644
index dbb474f..0000000
--- a/example-rules/remotemailfilter.properties
+++ /dev/null
@@ -1,24 +0,0 @@
-; if "target" is set at the end of that script,
-; a folder called whatever target contains will
-; be created and your message will be moved there.
-rules=rules.groovy
-
-; If true, on startup it goes through your read
-; messages in your inbox, and applies the rules to them
-
-process_read=false
-
-; Similarly, for unread messages.
-process_unread=true
-
-host=imap.example.com
-
-; 993 means SSL, anything else means not SSL
-port=993
-username=username
-
-; The first time you run this, an RSA key pair will
-; be generated and stored in your Mac OS X Keychain.
-; You will be prompted for the password (which isn't hidden, btw)
-; and it will be stored encrypted. Afaik, this is a
-; pretty goddamn safe solution for storing passwords.
diff --git a/src/main/java/com/episparq/remotemailfilter/RemoteFilter.java b/src/main/java/com/episparq/remotemailfilter/RemoteFilter.java
index 6e8e91a..78f93b0 100644
--- a/src/main/java/com/episparq/remotemailfilter/RemoteFilter.java
+++ b/src/main/java/com/episparq/remotemailfilter/RemoteFilter.java
@@ -1,18 +1,5 @@
 package com.episparq.remotemailfilter;
 
-import groovy.lang.Binding;
-import groovy.lang.GroovyCodeSource;
-import groovy.lang.GroovyShell;
-
-import java.awt.AWTException;
-import java.awt.Component;
-import java.awt.Container;
-import java.awt.Image;
-import java.awt.PopupMenu;
-import java.awt.SystemTray;
-import java.awt.Toolkit;
-import java.awt.TrayIcon;
-import java.io.BufferedInputStream;
 import java.io.BufferedReader;
 import java.io.File;
 import java.io.FileInputStream;
@@ -20,7 +7,6 @@ import java.io.FileOutputStream;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
-import java.io.OutputStream;
 import java.io.OutputStreamWriter;
 import java.io.Reader;
 import java.io.Writer;
@@ -29,52 +15,34 @@ import java.net.InetAddress;
 import java.security.KeyPair;
 import java.security.KeyPairGenerator;
 import java.security.KeyStore;
-import java.security.NoSuchAlgorithmException;
 import java.security.Security;
 import java.security.cert.Certificate;
 import java.security.cert.X509Certificate;
-import java.util.ArrayList;
 import java.util.Calendar;
 import java.util.Date;
-import java.util.Enumeration;
 import java.util.Properties;
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
 import javax.crypto.Cipher;
 import javax.crypto.CipherInputStream;
 import javax.crypto.CipherOutputStream;
-import javax.crypto.NoSuchPaddingException;
-import javax.mail.Address;
 import javax.mail.Flags;
 import javax.mail.Folder;
+import javax.mail.FolderNotFoundException;
 import javax.mail.Message;
 import javax.mail.MessagingException;
 import javax.mail.NoSuchProviderException;
 import javax.mail.Session;
-import javax.mail.Store;
 import javax.mail.event.MessageCountEvent;
 import javax.mail.event.MessageCountListener;
-import javax.mail.internet.InternetAddress;
-import javax.mail.internet.MimeMessage.RecipientType;
 import javax.mail.search.FlagTerm;
 import javax.security.auth.x500.X500Principal;
-import javax.swing.JButton;
-import javax.swing.JDialog;
-import javax.swing.JFrame;
-import javax.swing.JLabel;
-import javax.swing.JPanel;
-import javax.swing.JPasswordField;
-import javax.swing.JTextField;
-import javax.swing.Spring;
-import javax.swing.SpringLayout;
-import javax.swing.SwingUtilities;
-
-import org.bouncycastle.jce.provider.BouncyCastleProvider;
-import org.bouncycastle.x509.X509V1CertificateGenerator;
 
 import com.sun.mail.imap.IMAPFolder;
 import com.sun.mail.imap.IMAPStore;
+import groovy.lang.Binding;
+import groovy.lang.GroovyShell;
+import org.apache.log4j.Logger;
+import org.bouncycastle.jce.provider.BouncyCastleProvider;
+import org.bouncycastle.x509.X509V1CertificateGenerator;
 
 public class RemoteFilter extends Thread {
 	// http://svn.assembla.com/svn/SampleCode/gep/src/gep/minmax/UpsideDownShell.groovy
@@ -83,6 +51,8 @@ public class RemoteFilter extends Thread {
 	 * File("/Users/thatha/a.groovy")); } catch (Exception e) { return null; } }
 	 */
 
+    private static final Logger logger = Logger.getLogger(RemoteFilter.class);
+
 	private IMAPStore store;
 
 	public RemoteFilter(String rules, String hostname, String user,
@@ -100,19 +70,25 @@ public class RemoteFilter extends Thread {
 		this(rules, hostname, (ssl ? 993 : 143), user, password);
 	}
 
-	private String rules;
+    private String rules, hostname, user, password;
+    private int port;
+    private boolean ssl;
 
 	public RemoteFilter(String rulesSource, String hostname, int port,
 			String user, String password, boolean ssl)
 			throws RemoteFilterException {
 		this.setDaemon(true);
 
-		store = getRemoteStore(hostname, port, user, password, ssl);
+        store = getRemoteStore();
 		rules = rulesSource;
+        this.hostname = hostname;
+        this.port = port;
+        this.user = user;
+        this.password = password;
+        this.ssl = ssl;
 	}
 
-	private IMAPStore getRemoteStore(String hostname, int port, String user,
-			String password, boolean ssl) throws RemoteFilterException {
+    private IMAPStore getRemoteStore() throws RemoteFilterException {
 		Session session = Session.getDefaultInstance(new Properties());
 		try {
 			IMAPStore store = (IMAPStore) session.getStore((ssl ? "imaps"
@@ -129,9 +105,7 @@ public class RemoteFilter extends Thread {
 	public void processMessage(Message m) {
 
 		try {
-			System.out.println();
-			System.out.println("Message: " + m.getSubject());
-			System.out.println("From: " + m.getFrom()[0]);
+            logger.info("From: " + m.getFrom()[0] + " Message: " + m.getSubject());
 			
 			Binding bindings = new Binding();		
 			bindings.setVariable("m", m);
@@ -143,14 +117,23 @@ public class RemoteFilter extends Thread {
 		
 
 			if (target != null) {
-				System.out.println("Moving to " + target);
+                logger.info("Moving to " + target);
 				// BEGIN TRANSACTION
 				IMAPFolder f = ((IMAPFolder) store.getFolder(target));
 				if (!f.exists()) {
-					System.out.println("Creating " + target);
+                    logger.info("Creating " + target);
 					f.create(Folder.HOLDS_FOLDERS | Folder.HOLDS_MESSAGES);
 				}
+                int max = 10;
+                for (int i = 0; i < max; i++) {
+                    try {
 				m.getFolder().copyMessages(new Message[] { m }, f);
+                        break;
+                    } catch (FolderNotFoundException e) {
+                        logger.warn("folder appears not to exist retrying " + (i + 1) + " of " + max, e);
+                        Thread.sleep(100 * (i + 1));
+                    }
+                }
 				// Is there a way to verify the message was copied in order to
 				// fake transactions?
 				m.setFlag(Flags.Flag.DELETED, true);
@@ -161,20 +144,17 @@ public class RemoteFilter extends Thread {
 				// ff.open(Folder.READ_WRITE);
 			}
 		} catch (Exception e) {
-			e.printStackTrace();
+            logger.error("error processing message", e);
 		}
 	}
 
-	private IMAPFolder inbox;
-
-	private boolean threadRunning = true;
-
 	public boolean processUnread = false;
 	
 	public boolean processRead = false;
 	
 	public void run() {
-		assert (store instanceof IMAPStore);
+        assert (store != null);
+        IMAPFolder inbox;
 		try {
 			inbox = (IMAPFolder) store.getFolder("INBOX");
 			inbox.open(Folder.READ_WRITE);
@@ -190,7 +170,7 @@ public class RemoteFilter extends Thread {
 					processMessage(m);
 				}
 			} catch (MessagingException e) {
-				e.printStackTrace();
+                logger.error("error processing unread", e);
 			}
 		}
 
@@ -202,7 +182,7 @@ public class RemoteFilter extends Thread {
 					processMessage(m);
 				}
 			} catch (MessagingException e) {
-				e.printStackTrace();
+                logger.error("error processing unread", e);
 			}
 		}
 
@@ -219,139 +199,26 @@ public class RemoteFilter extends Thread {
 			}
 		});
 
-		while (threadRunning) {
+        while (true) {
 			try {
 				inbox.idle();
 			} catch (MessagingException e) {
-				e.printStackTrace();
-			}
-		}
-	}
-
-	private static class Prompt {
-		String prompt;
-		String propertyName;
-		boolean secret;
-
-		public Prompt(String prompt) {
-			this(prompt, prompt.toLowerCase().replaceAll(" ", "_"));
-		}
-
-		public Prompt(String prompt, String propertyName) {
-			this(prompt, propertyName, false);
-		}
-
-		public Prompt(String prompt, String propertyName, boolean secret) {
-			this.prompt = prompt;
-			this.propertyName = propertyName;
-			this.secret = secret;
-		}
-	}
-
-	private static SpringLayout.Constraints getConstraintsForCell(int row,
-			int col, Container parent, int cols) {
-		SpringLayout layout = (SpringLayout) parent.getLayout();
-		Component c = parent.getComponent(row * cols + col);
-		return layout.getConstraints(c);
-	}
-
-	/**
-	 * Aligns the first <code>rows</code> * <code>cols</code> components of
-	 * <code>parent</code> in a grid. Each component in a column is as wide as
-	 * the maximum preferred width of the components in that column; height is
-	 * similarly determined for each row. The parent is made just big enough to
-	 * fit them all.
-	 * 
-	 * @param rows
-	 *            number of rows
-	 * @param cols
-	 *            number of columns
-	 * @param initialX
-	 *            x location to start the grid at
-	 * @param initialY
-	 *            y location to start the grid at
-	 * @param xPad
-	 *            x padding between cells
-	 * @param yPad
-	 *            y padding between cells
-	 */
-	public static void makeCompactGrid(Container parent, int rows, int cols,
-			int initialX, int initialY, int xPad, int yPad) {
-		SpringLayout layout = (SpringLayout) parent.getLayout();
-
-		// Align all cells in each column and make them the same width.
-		Spring x = Spring.constant(initialX);
-		for (int c = 0; c < cols; c++) {
-			Spring width = Spring.constant(0);
-			for (int r = 0; r < rows; r++) {
-				width = Spring.max(width, getConstraintsForCell(r, c, parent,
-						cols).getWidth());
-			}
-			for (int r = 0; r < rows; r++) {
-				SpringLayout.Constraints constraints = getConstraintsForCell(r,
-						c, parent, cols);
-				constraints.setX(x);
-				constraints.setWidth(width);
-			}
-			x = Spring.sum(x, Spring.sum(width, Spring.constant(xPad)));
-		}
-
-		// Align all cells in each row and make them the same height.
-		Spring y = Spring.constant(initialY);
-		for (int r = 0; r < rows; r++) {
-			Spring height = Spring.constant(0);
-			for (int c = 0; c < cols; c++) {
-				height = Spring.max(height, getConstraintsForCell(r, c, parent,
-						cols).getHeight());
-			}
-			for (int c = 0; c < cols; c++) {
-				SpringLayout.Constraints constraints = getConstraintsForCell(r,
-						c, parent, cols);
-				constraints.setY(y);
-				constraints.setHeight(height);
-			}
-			y = Spring.sum(y, Spring.sum(height, Spring.constant(yPad)));
+                logger.error("error idling, will reconnect", e);
+                try {
+                    Thread.sleep(500);
+                } catch (InterruptedException ex) {
+                    logger.error("error", ex);
 		}
-
-		// Set the parent's size.
-		SpringLayout.Constraints pCons = layout.getConstraints(parent);
-		pCons.setConstraint(SpringLayout.SOUTH, y);
-		pCons.setConstraint(SpringLayout.EAST, x);
+                try {
+                    store = getRemoteStore();
+                } catch (RemoteFilterException ex) {
+                    logger.error("error reconnecting...", ex);
 	}
-
-	public static Properties updateSettings(Properties properties) {
-		Properties rules = new Properties();
-
-		JDialog dialog = new JDialog();
-		dialog.setModal(true);
-		dialog.setLayout(new SpringLayout());
-
-		Prompt[] prompts = new Prompt[] { new Prompt("Hostname"),
-				new Prompt("Port"), new Prompt("Username"),
-				new Prompt("Password", "passowrd", true) };
-
-		for (Prompt p : prompts) {
-			JLabel label = new JLabel(p.prompt + ": ", JLabel.TRAILING);
-			dialog.add(label);
-			JTextField textField;
-
-			if (p.secret) {
-				textField = new JPasswordField("");
-			} else {
-				textField = new JTextField(properties.getProperty(
-						p.propertyName, ""));
+            } catch (Exception e) {
+                logger.error("error idling, exiting...", e);
+                break;
 			}
-
-			label.setLabelFor(textField);
-			dialog.add(textField);
 		}
-
-		dialog.add(new JButton("pipis"));
-
-		makeCompactGrid(dialog.getContentPane(), prompts.length, 2, 4, 4, 4, 4);
-		dialog.setBounds(0, 0, 250, prompts.length * 44);
-		dialog.setVisible(true);
-		return properties;
 	}
 
 	private static KeyStore.PrivateKeyEntry generateMyCert() throws IOException {
@@ -362,7 +229,7 @@ public class RemoteFilter extends Thread {
 			calendar.roll(Calendar.YEAR, true);
 			Date expiryDate = calendar.getTime();
 
-			System.out.println("Generating new RSA1024 keypair...");
+            logger.info("Generating new RSA1024 keypair...");
 
 			Security.addProvider(new BouncyCastleProvider());
 			KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
@@ -384,15 +251,12 @@ public class RemoteFilter extends Thread {
 			certGen.setSignatureAlgorithm("SHA256WithRSAEncryption");
 
 			X509Certificate cert = certGen.generate(keyPair.getPrivate(), "BC");
-			System.out
-					.println("generating new self-signed certificate that certifies the keypair");
+            logger.info("generating new self-signed certificate that certifies the keypair");
 
-			KeyStore.PrivateKeyEntry e = new KeyStore.PrivateKeyEntry(keyPair
-					.getPrivate(), new Certificate[] { cert });
-			return e;
+            return new KeyStore.PrivateKeyEntry(keyPair.getPrivate(), new Certificate[]{cert});
 
 		} catch (Exception e) {
-			e.printStackTrace();
+            logger.error("error", e);
 			return null;
 		}
 	}
@@ -415,7 +279,7 @@ public class RemoteFilter extends Thread {
 						new KeyStore.PasswordProtection("-".toCharArray()));
 				keyStore.store(null, null);
 			} else {
-				System.out.println("Private key loaded: " + key.getPrivateKey().getAlgorithm());
+                logger.info("Private key loaded: " + key.getPrivateKey().getAlgorithm());
 			}
 
 			/*
@@ -437,10 +301,8 @@ public class RemoteFilter extends Thread {
 								SECRETS_FILENAME), rsa)));
 				password = is.readLine();
 				is.close();
-				rsa = null;
 			} catch (Exception e) {
-				System.out.println("couldnt read password from file "
-						+ e.getMessage());
+                logger.error("cannot read password from file ", e);
 			}
 
 			/**
@@ -453,9 +315,7 @@ public class RemoteFilter extends Thread {
 			 * out.write("Hello World!!"); out.close(); os.close();
 			 **/
 		} catch (Exception e) {
-			e.printStackTrace();
-			System.err.println(e.getMessage());
-			// Ignore.
+            logger.error("error", e);
 		}
 
 		if (password == null) {
@@ -469,10 +329,8 @@ public class RemoteFilter extends Thread {
 						new FileOutputStream(SECRETS_FILENAME), rsa));
 				os.write(password);
 				os.close();
-				rsa = null;
 			} catch (Exception e) {
-				e.printStackTrace();
-				System.err.println("couldnt store passowrd " + e.getMessage());
+                logger.error("cannot store password", e);
 			}
 
 		}
@@ -488,22 +346,6 @@ public class RemoteFilter extends Thread {
 
 	public static void main(String[] args) throws Exception {
 
-	/*	if (SystemTray.isSupported()) {
-			try {
-				final TrayIcon trayIcon;
-				SystemTray tray = SystemTray.getSystemTray();
-
-				Image image = Toolkit.getDefaultToolkit().getImage(
-						RemoteFilter.class.getResource("icon.png"));
-				PopupMenu menu = new PopupMenu();
-				trayIcon = new TrayIcon(image, "Remote Filter", menu);
-
-				tray.add(trayIcon);
-			} catch (Exception e) {
-				e.printStackTrace();
-			}
-		}*/
-		
 		Properties properties = new Properties();
 		try {
 			FileInputStream propertiesStream = new FileInputStream(new File(PROPERTIES_FILENAME));
@@ -517,7 +359,7 @@ public class RemoteFilter extends Thread {
 
 		String password = fetchPasswordOrAsk();
 
-		InputStream rulesStream = new FileInputStream(new File(USER_HOME + (String) properties.get("rules")));
+        InputStream rulesStream = new FileInputStream(new File(USER_HOME + properties.get("rules")));
 		
 		final char[] buffer = new char[0x10000];
 		StringBuilder out = new StringBuilder();
diff --git a/src/main/resources/log4j.properties b/src/main/resources/log4j.properties
new file mode 100644
index 0000000..f269c3e
--- /dev/null
+++ b/src/main/resources/log4j.properties
@@ -0,0 +1,7 @@
+log4j.rootCategory=INFO, LOGFILE
+#log4j.logger.org.codehaus.wadi=DEBUG, LOGFILE
+
+log4j.appender.LOGFILE=org.apache.log4j.ConsoleAppender
+log4j.appender.LOGFILE.Threshold=TRACE
+log4j.appender.LOGFILE.layout=org.apache.log4j.PatternLayout
+log4j.appender.LOGFILE.layout.ConversionPattern=%d [%t] %-5p %c - %m%n
